Index: src/test/java/ru/yandex/praktikum/CreateCourierPositiveTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.yandex.praktikum;\r\n\r\nimport io.qameta.allure.junit4.DisplayName;\r\nimport io.restassured.RestAssured;\r\nimport io.restassured.response.ValidatableResponse;\r\nimport org.junit.After;\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\nimport static org.hamcrest.CoreMatchers.equalTo;\r\nimport static org.hamcrest.MatcherAssert.assertThat;\r\nimport static org.junit.Assert.assertEquals;\r\nimport static org.junit.Assert.assertTrue;\r\n\r\n\r\npublic class CreateCourierPositiveTests {\r\n    private Courier courier;\r\n    private CourierClient courierClient;\r\n    private int courierId;\r\n\r\n    @Before\r\n    public void setUp() {\r\n        RestAssured.baseURI = \"http://qa-scooter.praktikum-services.ru\";\r\n        courier = Courier.getRandom();\r\n        courierClient = new CourierClient();\r\n    }\r\n\r\n    @After\r\n    public void tearDown() {\r\n        courierClient.delete(courierId);\r\n    }\r\n\r\n    @Test\r\n    @DisplayName(\"Создание курьера\")\r\n    public void newRegistrationCourierTest() {\r\n        ValidatableResponse response = courierClient.create(courier);\r\n        courierId = courierClient.login(CourierData.from(courier));\r\n\r\n        int statusCode = response.extract().statusCode();\r\n        boolean isCourierCreated = response.extract().path(\"ok\");\r\n\r\n        assertTrue(isCourierCreated);\r\n        assertThat(statusCode, equalTo(201));\r\n    }\r\n\r\n    @Test\r\n    @DisplayName(\"Повторное создание курьера с уже зарегистрированными данными\")\r\n    public void reRegistrationCourierTest() {\r\n\r\n        courierClient.create(courier);\r\n        ValidatableResponse response = courierClient.create(courier);\r\n\r\n        int statusCode = response.extract().statusCode();\r\n        String errorText = response.extract().path(\"message\");\r\n\r\n        assertThat(statusCode, equalTo(409));\r\n        assertEquals(\"Этот логин уже используется.\", errorText);\r\n    /*\r\n    Тест будет завершаться с ошибкой, так как ожидаемый результат не соответствует документации.\r\n    Expected: Этот логин уже используется\r\n    Actual: Этот логин уже используется. Попробуйте другой.\r\n     */\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/ru/yandex/praktikum/CreateCourierPositiveTests.java b/src/test/java/ru/yandex/praktikum/CreateCourierPositiveTests.java
--- a/src/test/java/ru/yandex/praktikum/CreateCourierPositiveTests.java	
+++ b/src/test/java/ru/yandex/praktikum/CreateCourierPositiveTests.java	
@@ -19,7 +19,7 @@
 
     @Before
     public void setUp() {
-        RestAssured.baseURI = "http://qa-scooter.praktikum-services.ru";
+        RestAssured.baseURI = BaseUri.getBaseUri();
         courier = Courier.getRandom();
         courierClient = new CourierClient();
     }
Index: src/main/java/ru/yandex/praktikum/CourierClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.yandex.praktikum;\r\n\r\nimport io.qameta.allure.Step;\r\nimport io.restassured.response.Response;\r\nimport io.restassured.response.ValidatableResponse;\r\n\r\nimport static io.restassured.RestAssured.given;\r\n\r\npublic class CourierClient {\r\n    public final static String APIURL = \"api/v1/courier/\";\r\n    public final static String Type = \"Content-type\";\r\n    public final static String APP = \"application/json\";\r\n\r\n\r\n    // метод создания курьера\r\n    @Step\r\n    public ValidatableResponse create(Courier courier) {\r\n        return given()\r\n                .header(Type, APP)\r\n                .body(courier)\r\n                .when()\r\n                .post(APIURL)\r\n                .then();\r\n    }\r\n\r\n    // метод создания курьера, без логина\r\n    @Step\r\n    public ValidatableResponse createWithOutLogin(Courier courier){\r\n        String body = \"{\\\"password\\\":\\\"\" + courier.password + \"\\\",\"\r\n                + \"\\\"firstName\\\":\\\"\" + courier.firstName + \"\\\"}\";\r\n        return given()\r\n               .header(Type, APP)\r\n               .body(body)\r\n               .when()\r\n               .post(APIURL)\r\n               .then();\r\n    }\r\n\r\n    // метод создания курьера, без пароля\r\n    @Step\r\n    public ValidatableResponse createWithOutPassword(Courier courier){\r\n        String body = \"{\\\"login\\\":\\\"\" + courier.login + \"\\\",\"\r\n                + \"\\\"firstName\\\":\\\"\" + courier.firstName + \"\\\"}\";\r\n        return given()\r\n                .header(Type, APP)\r\n                .body(body)\r\n                .when()\r\n                .post(APIURL)\r\n                .then();\r\n    }\r\n\r\n    // метод для авторизации курьера в системе\r\n    @Step\r\n    public int login(CourierData courierData) {\r\n        return given()\r\n                .header(Type, APP)\r\n                .body(courierData)\r\n                .when()\r\n                .post(APIURL+\"login/\")\r\n                .then()\r\n                .extract()\r\n                .path(\"id\");\r\n    }\r\n\r\n    // метод для авторизации курьера в системе без логина\r\n    @Step\r\n    public ValidatableResponse loginWithoutLogin(Courier courier) {\r\n        String body = \"{\\\"password\\\":\\\"\" + courier.password + \"\\\"}\";\r\n        return given()\r\n                .header(Type, APP)\r\n                .body(body)\r\n                .when()\r\n                .post(APIURL+\"login/\")\r\n                .then();\r\n    }\r\n\r\n    // метод для авторизации курьера в системе без пароля\r\n    @Step\r\n    public ValidatableResponse loginWithoutPassword(Courier courier) {\r\n        String body = \"{\\\"login\\\":\\\"\" + courier.login + \"\\\"}\";\r\n        return given()\r\n                .header(Type, APP)\r\n                .body(body)\r\n                .when()\r\n                .post(APIURL+\"login/\")\r\n                .then();\r\n\r\n    }\r\n\r\n    // метод для авторизации незарегистрированного курьера\r\n    @Step\r\n    public ValidatableResponse unregisteredCourierlogin(Courier courier) {\r\n        String body = \"{\\\"login\\\":\\\"\" + courier.login + \"\\\",\"\r\n                + \"\\\"password\\\":\\\"\" + courier.password + \"\\\"}\";\r\n        return given()\r\n                .header(Type, APP)\r\n                .body(body)\r\n                .when()\r\n                .post(APIURL+\"login/\")\r\n                .then();\r\n    }\r\n\r\n    // метод для удаления курьера\r\n    @Step\r\n    public void delete(int courierId) {\r\n                 given()\r\n                .header(Type, APP)\r\n                .when()\r\n                .post(APIURL + courierId);\r\n\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/yandex/praktikum/CourierClient.java b/src/main/java/ru/yandex/praktikum/CourierClient.java
--- a/src/main/java/ru/yandex/praktikum/CourierClient.java	
+++ b/src/main/java/ru/yandex/praktikum/CourierClient.java	
@@ -3,7 +3,6 @@
 import io.qameta.allure.Step;
 import io.restassured.response.Response;
 import io.restassured.response.ValidatableResponse;
-
 import static io.restassured.RestAssured.given;
 
 public class CourierClient {
@@ -11,9 +10,7 @@
     public final static String Type = "Content-type";
     public final static String APP = "application/json";
 
-
-    // метод создания курьера
-    @Step
+    @Step("Запрос на регистрацию курьера")
     public ValidatableResponse create(Courier courier) {
         return given()
                 .header(Type, APP)
@@ -23,8 +20,7 @@
                 .then();
     }
 
-    // метод создания курьера, без логина
-    @Step
+    @Step("Запрос на регистрацию курьера без логина")
     public ValidatableResponse createWithOutLogin(Courier courier){
         String body = "{\"password\":\"" + courier.password + "\","
                 + "\"firstName\":\"" + courier.firstName + "\"}";
@@ -36,8 +32,7 @@
                .then();
     }
 
-    // метод создания курьера, без пароля
-    @Step
+    @Step("Запрос на регистрацию курьера без пароля")
     public ValidatableResponse createWithOutPassword(Courier courier){
         String body = "{\"login\":\"" + courier.login + "\","
                 + "\"firstName\":\"" + courier.firstName + "\"}";
@@ -49,8 +44,7 @@
                 .then();
     }
 
-    // метод для авторизации курьера в системе
-    @Step
+    @Step("Запрос на авторизацию курьера")
     public int login(CourierData courierData) {
         return given()
                 .header(Type, APP)
@@ -62,9 +56,8 @@
                 .path("id");
     }
 
-    // метод для авторизации курьера в системе без логина
-    @Step
-    public ValidatableResponse loginWithoutLogin(Courier courier) {
+    @Step("Запрос на авторизацию курьера без логина")
+    public ValidatableResponse authorizationWithoutLogin(Courier courier) {
         String body = "{\"password\":\"" + courier.password + "\"}";
         return given()
                 .header(Type, APP)
@@ -74,9 +67,8 @@
                 .then();
     }
 
-    // метод для авторизации курьера в системе без пароля
-    @Step
-    public ValidatableResponse loginWithoutPassword(Courier courier) {
+    @Step("Запрос на авторизацию курьера без пароля")
+    public ValidatableResponse authorizationWithoutPassword(Courier courier) {
         String body = "{\"login\":\"" + courier.login + "\"}";
         return given()
                 .header(Type, APP)
@@ -87,26 +79,22 @@
 
     }
 
-    // метод для авторизации незарегистрированного курьера
-    @Step
-    public ValidatableResponse unregisteredCourierlogin(Courier courier) {
-        String body = "{\"login\":\"" + courier.login + "\","
-                + "\"password\":\"" + courier.password + "\"}";
-        return given()
+    @Step("Запрос на авторизацию незарегистрированного курьера")
+    public Response authorizationUnregisteredCourier(CourierData courierData) {
+        return (Response) given()
                 .header(Type, APP)
-                .body(body)
+                .body(courierData)
                 .when()
-                .post(APIURL+"login/")
-                .then();
+                .post(APIURL+"login/");
     }
 
-    // метод для удаления курьера
-    @Step
+    @Step("Запрос на удаление курьера")
     public void delete(int courierId) {
+        if (courierId != 0) {
                  given()
                 .header(Type, APP)
                 .when()
-                .post(APIURL + courierId);
+                .post(APIURL + courierId);}
 
     }
 
Index: src/test/java/ru/yandex/praktikum/CreateOrderTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.yandex.praktikum;\r\n\r\nimport io.qameta.allure.junit4.DisplayName;\r\nimport io.restassured.RestAssured;\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\nimport org.junit.runner.RunWith;\r\nimport org.junit.runners.Parameterized;\r\n\r\nimport static io.restassured.RestAssured.given;\r\nimport static org.junit.Assert.*;\r\n\r\n\r\n@RunWith(Parameterized.class)\r\npublic class CreateOrderTest{\r\n    @Before\r\n    public void setUp() {\r\n        RestAssured.baseURI = \"http://qa-scooter.praktikum-services.ru\";}\r\n\r\n\r\n    private final String color;\r\n    private final int unexpectedNumber;\r\n\r\n    public CreateOrderTest(String color, int unexpectedNumber){\r\n        this.color = color;\r\n        this.unexpectedNumber = unexpectedNumber;\r\n    };\r\n\r\n    @Parameterized.Parameters\r\n    public static Object[][] checkColorCombinations() {\r\n        return new Object[][] {\r\n                {\",\\\"color\\\":[\\\"BLACK\\\"]\", 0},\r\n                {\",\\\"color\\\":[\\\"GREY\\\"]\", 0},\r\n                {\",\\\"color\\\":[\\\"BLACK\\\", \\\"GRAY\\\"]\", 0},\r\n                {\"\", 0},\r\n        };\r\n    }\r\n\r\n\r\n    @Test\r\n    @DisplayName(\"Параметризованный тест на создание заказа\")\r\n    public void createOrderParameterizedTest(){\r\n\r\n     String body = \"{\\\"firstName\\\":\\\"Nikita\\\",\"\r\n                + \"\\\"lastName\\\":\\\"Ryazanskiy\\\",\"\r\n                + \"\\\"address\\\":\\\"Ryazan-city\\\",\"\r\n                + \"\\\"metroStation\\\":\\\"4\\\",\"\r\n                + \"\\\"phone\\\":\\\"+7 111 222 33 44\\\",\"\r\n                + \"\\\"rentTime\\\":\\\"12\\\",\"\r\n                + \"\\\"deliveryDate\\\":\\\"2022-02-01\\\",\"\r\n                + \"\\\"comment\\\":\\\"RED GOES FASTER!\\\"\"\r\n                + color +\"}\";\r\n\r\n        int returnedTrackNumber = given()\r\n                .header(\"Content-type\", \"application/json\")\r\n                .body(body)\r\n                .when()\r\n                .post(\"/api/v1/orders\")\r\n                .then()\r\n                .extract()\r\n                .path(\"track\");\r\n\r\n        assertNotEquals(unexpectedNumber, returnedTrackNumber);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/ru/yandex/praktikum/CreateOrderTest.java b/src/test/java/ru/yandex/praktikum/CreateOrderTest.java
--- a/src/test/java/ru/yandex/praktikum/CreateOrderTest.java	
+++ b/src/test/java/ru/yandex/praktikum/CreateOrderTest.java	
@@ -15,7 +15,8 @@
 public class CreateOrderTest{
     @Before
     public void setUp() {
-        RestAssured.baseURI = "http://qa-scooter.praktikum-services.ru";}
+        RestAssured.baseURI = BaseUri.getBaseUri();
+    }
 
 
     private final String color;
Index: target/allure-results/8ff2cc50-6645-4a1e-a1c0-04479424b9a7-result.json
===================================================================
diff --git a/target/allure-results/8ff2cc50-6645-4a1e-a1c0-04479424b9a7-result.json b/target/allure-results/8ff2cc50-6645-4a1e-a1c0-04479424b9a7-result.json
deleted file mode 100644
--- a/target/allure-results/8ff2cc50-6645-4a1e-a1c0-04479424b9a7-result.json	
+++ /dev/null	
@@ -1,1 +0,0 @@
-{"uuid":"8ff2cc50-6645-4a1e-a1c0-04479424b9a7","historyId":"e7f42d4379432ec7bac15437be9bb486","fullName":"ru.yandex.praktikum.CreateOrderTest.createOrderParameterizedTest[2]","labels":[{"name":"package","value":"ru.yandex.praktikum"},{"name":"testClass","value":"ru.yandex.praktikum.CreateOrderTest"},{"name":"testMethod","value":"createOrderParameterizedTest[2]"},{"name":"suite","value":"ru.yandex.praktikum.CreateOrderTest"},{"name":"host","value":"LAPTOP-U2DF6PFP"},{"name":"thread","value":"98600@LAPTOP-U2DF6PFP.main(1)"},{"name":"framework","value":"junit4"},{"name":"language","value":"java"}],"links":[],"name":"Параметризованный тест на создание заказа","status":"passed","stage":"finished","steps":[],"attachments":[],"parameters":[],"start":1638132194184,"stop":1638132194272}
\ No newline at end of file
Index: target/allure-results/eef68fe2-8b53-4e23-8e93-921a6b275514-result.json
===================================================================
diff --git a/target/allure-results/eef68fe2-8b53-4e23-8e93-921a6b275514-result.json b/target/allure-results/eef68fe2-8b53-4e23-8e93-921a6b275514-result.json
deleted file mode 100644
--- a/target/allure-results/eef68fe2-8b53-4e23-8e93-921a6b275514-result.json	
+++ /dev/null	
@@ -1,1 +0,0 @@
-{"uuid":"eef68fe2-8b53-4e23-8e93-921a6b275514","historyId":"4a303f0b58b21594c5c425fb3df504c5","fullName":"ru.yandex.praktikum.CreateOrderTest.createOrderParameterizedTest[1]","labels":[{"name":"package","value":"ru.yandex.praktikum"},{"name":"testClass","value":"ru.yandex.praktikum.CreateOrderTest"},{"name":"testMethod","value":"createOrderParameterizedTest[1]"},{"name":"suite","value":"ru.yandex.praktikum.CreateOrderTest"},{"name":"host","value":"LAPTOP-U2DF6PFP"},{"name":"thread","value":"98600@LAPTOP-U2DF6PFP.main(1)"},{"name":"framework","value":"junit4"},{"name":"language","value":"java"}],"links":[],"name":"Параметризованный тест на создание заказа","status":"passed","stage":"finished","steps":[],"attachments":[],"parameters":[],"start":1638132194064,"stop":1638132194179}
\ No newline at end of file
Index: target/allure-results/4a84bd8e-2c1f-42eb-b76b-89e7ab95d831-result.json
===================================================================
diff --git a/target/allure-results/4a84bd8e-2c1f-42eb-b76b-89e7ab95d831-result.json b/target/allure-results/4a84bd8e-2c1f-42eb-b76b-89e7ab95d831-result.json
deleted file mode 100644
--- a/target/allure-results/4a84bd8e-2c1f-42eb-b76b-89e7ab95d831-result.json	
+++ /dev/null	
@@ -1,1 +0,0 @@
-{"uuid":"4a84bd8e-2c1f-42eb-b76b-89e7ab95d831","historyId":"317b88119e3828f322ae586cc73acb90","fullName":"ru.yandex.praktikum.CreateOrderTest.createOrderParameterizedTest[3]","labels":[{"name":"package","value":"ru.yandex.praktikum"},{"name":"testClass","value":"ru.yandex.praktikum.CreateOrderTest"},{"name":"testMethod","value":"createOrderParameterizedTest[3]"},{"name":"suite","value":"ru.yandex.praktikum.CreateOrderTest"},{"name":"host","value":"LAPTOP-U2DF6PFP"},{"name":"thread","value":"98600@LAPTOP-U2DF6PFP.main(1)"},{"name":"framework","value":"junit4"},{"name":"language","value":"java"}],"links":[],"name":"Параметризованный тест на создание заказа","status":"passed","stage":"finished","steps":[],"attachments":[],"parameters":[],"start":1638132194276,"stop":1638132194387}
\ No newline at end of file
Index: target/allure-results/718adc0e-95a6-4846-ad7e-f44cbf1aa1f0-result.json
===================================================================
diff --git a/target/allure-results/718adc0e-95a6-4846-ad7e-f44cbf1aa1f0-result.json b/target/allure-results/718adc0e-95a6-4846-ad7e-f44cbf1aa1f0-result.json
deleted file mode 100644
--- a/target/allure-results/718adc0e-95a6-4846-ad7e-f44cbf1aa1f0-result.json	
+++ /dev/null	
@@ -1,1 +0,0 @@
-{"uuid":"718adc0e-95a6-4846-ad7e-f44cbf1aa1f0","historyId":"55e312606fe734b3998cde9e0af132a5","fullName":"ru.yandex.praktikum.CreateCourierPositiveTests.reRegistrationCourierTest","labels":[{"name":"package","value":"ru.yandex.praktikum"},{"name":"testClass","value":"ru.yandex.praktikum.CreateCourierPositiveTests"},{"name":"testMethod","value":"reRegistrationCourierTest"},{"name":"suite","value":"ru.yandex.praktikum.CreateCourierPositiveTests"},{"name":"host","value":"LAPTOP-U2DF6PFP"},{"name":"thread","value":"98600@LAPTOP-U2DF6PFP.main(1)"},{"name":"framework","value":"junit4"},{"name":"language","value":"java"}],"links":[],"name":"Повторное создание курьера с уже зарегистрированными данными","status":"failed","statusDetails":{"known":false,"muted":false,"flaky":false,"message":"expected:<...ин уже используется.[]> but was:<...ин уже используется.[ Попробуйте другой.]>","trace":"org.junit.ComparisonFailure: expected:<...ин уже используется.[]> but was:<...ин уже используется.[ Попробуйте другой.]>\r\n\tat org.junit.Assert.assertEquals(Assert.java:117)\r\n\tat org.junit.Assert.assertEquals(Assert.java:146)\r\n\tat ru.yandex.praktikum.CreateCourierPositiveTests.reRegistrationCourierTest(CreateCourierPositiveTests.java:56)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\r\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)\r\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\r\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\r\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)\r\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)\r\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\r\n\tat org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\r\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:413)\r\n\tat org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365)\r\n\tat org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273)\r\n\tat org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)\r\n\tat org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)\r\n\tat org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)\r\n"},"stage":"finished","steps":[{"name":"create","status":"passed","stage":"finished","steps":[],"attachments":[],"parameters":[{"name":"courier","value":"ru.yandex.praktikum.Courier@2fca9fae"}],"start":1638132192476,"stop":1638132192667},{"name":"create","status":"passed","stage":"finished","steps":[],"attachments":[],"parameters":[{"name":"courier","value":"ru.yandex.praktikum.Courier@2fca9fae"}],"start":1638132192668,"stop":1638132192773},{"name":"delete","status":"passed","stage":"finished","steps":[],"attachments":[],"parameters":[{"name":"courierId","value":"0"}],"start":1638132192805,"stop":1638132193885}],"attachments":[],"parameters":[],"start":1638132192475,"stop":1638132193896}
\ No newline at end of file
Index: target/allure-results/dc0a6506-5c57-4c4f-b9f3-9f2d35189db6-result.json
===================================================================
diff --git a/target/allure-results/dc0a6506-5c57-4c4f-b9f3-9f2d35189db6-result.json b/target/allure-results/dc0a6506-5c57-4c4f-b9f3-9f2d35189db6-result.json
deleted file mode 100644
--- a/target/allure-results/dc0a6506-5c57-4c4f-b9f3-9f2d35189db6-result.json	
+++ /dev/null	
@@ -1,1 +0,0 @@
-{"uuid":"dc0a6506-5c57-4c4f-b9f3-9f2d35189db6","historyId":"4d29f2246297c0c2fc43092cb42693b1","fullName":"ru.yandex.praktikum.AuthorisationCourierNegativeTests.courierAuthorisationWithIncorrectData","labels":[{"name":"package","value":"ru.yandex.praktikum"},{"name":"testClass","value":"ru.yandex.praktikum.AuthorisationCourierNegativeTests"},{"name":"testMethod","value":"courierAuthorisationWithIncorrectData"},{"name":"suite","value":"ru.yandex.praktikum.AuthorisationCourierNegativeTests"},{"name":"host","value":"LAPTOP-U2DF6PFP"},{"name":"thread","value":"98600@LAPTOP-U2DF6PFP.main(1)"},{"name":"framework","value":"junit4"},{"name":"language","value":"java"}],"links":[],"name":"Авторизация незарегистрированного курьера ","status":"passed","stage":"finished","steps":[{"name":"unregisteredCourierlogin","status":"passed","stage":"finished","steps":[],"attachments":[],"parameters":[{"name":"courier","value":"ru.yandex.praktikum.Courier@16e5c19f"}],"start":1638132191091,"stop":1638132191194}],"attachments":[],"parameters":[],"start":1638132191090,"stop":1638132191234}
\ No newline at end of file
Index: target/allure-results/5ce3714b-908b-4829-8080-70a1645ece2a-result.json
===================================================================
diff --git a/target/allure-results/5ce3714b-908b-4829-8080-70a1645ece2a-result.json b/target/allure-results/5ce3714b-908b-4829-8080-70a1645ece2a-result.json
deleted file mode 100644
--- a/target/allure-results/5ce3714b-908b-4829-8080-70a1645ece2a-result.json	
+++ /dev/null	
@@ -1,1 +0,0 @@
-{"uuid":"5ce3714b-908b-4829-8080-70a1645ece2a","historyId":"15de1d28e9b876c8c607c52ee7594de4","fullName":"ru.yandex.praktikum.AuthorisationCourierNegativeTests.courierAuthorisationWithOutPassword","labels":[{"name":"package","value":"ru.yandex.praktikum"},{"name":"testClass","value":"ru.yandex.praktikum.AuthorisationCourierNegativeTests"},{"name":"testMethod","value":"courierAuthorisationWithOutPassword"},{"name":"suite","value":"ru.yandex.praktikum.AuthorisationCourierNegativeTests"},{"name":"host","value":"LAPTOP-U2DF6PFP"},{"name":"thread","value":"98600@LAPTOP-U2DF6PFP.main(1)"},{"name":"framework","value":"junit4"},{"name":"language","value":"java"}],"links":[],"name":"Авторизация курьера без указания пароля","status":"broken","statusDetails":{"known":false,"muted":false,"flaky":false,"message":"test timed out after 15000 milliseconds","trace":"org.junit.runners.model.TestTimedOutException: test timed out after 15000 milliseconds\r\n\tat java.base@11.0.12/java.net.SocketInputStream.socketRead0(Native Method)\r\n\tat java.base@11.0.12/java.net.SocketInputStream.socketRead(SocketInputStream.java:115)\r\n\tat java.base@11.0.12/java.net.SocketInputStream.read(SocketInputStream.java:168)\r\n\tat java.base@11.0.12/java.net.SocketInputStream.read(SocketInputStream.java:140)\r\n\tat app//org.apache.http.impl.io.AbstractSessionInputBuffer.fillBuffer(AbstractSessionInputBuffer.java:161)\r\n\tat app//org.apache.http.impl.io.SocketInputBuffer.fillBuffer(SocketInputBuffer.java:82)\r\n\tat app//org.apache.http.impl.io.AbstractSessionInputBuffer.readLine(AbstractSessionInputBuffer.java:276)\r\n\tat app//org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:138)\r\n\tat app//org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:56)\r\n\tat app//org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:259)\r\n\tat app//org.apache.http.impl.AbstractHttpClientConnection.receiveResponseHeader(AbstractHttpClientConnection.java:294)\r\n\tat app//org.apache.http.impl.conn.DefaultClientConnection.receiveResponseHeader(DefaultClientConnection.java:257)\r\n\tat app//org.apache.http.impl.conn.ManagedClientConnectionImpl.receiveResponseHeader(ManagedClientConnectionImpl.java:207)\r\n\tat app//org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:273)\r\n\tat app//org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:125)\r\n\tat app//org.apache.http.impl.client.DefaultRequestDirector.tryExecute(DefaultRequestDirector.java:679)\r\n\tat app//org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:481)\r\n\tat app//org.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:835)\r\n\tat app//org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)\r\n\tat app//org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56)\r\n\tat org.apache.http.client.HttpClient$execute$0.call(Unknown Source)\r\n\tat app//io.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2072)\r\n\tat app//io.restassured.internal.http.HTTPBuilder.post(HTTPBuilder.java:350)\r\n\tat io.restassured.internal.http.HTTPBuilder$post$2.call(Unknown Source)\r\n\tat app//io.restassured.internal.RequestSpecificationImpl.sendRequest(RequestSpecificationImpl.groovy:1183)\r\n\tat java.base@11.0.12/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base@11.0.12/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base@11.0.12/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base@11.0.12/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat app//org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)\r\n\tat app//groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\r\n\tat app//groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)\r\n\tat app//groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)\r\n\tat app//groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)\r\n\tat app//groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)\r\n\tat app//org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)\r\n\tat app//org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:166)\r\n\tat app//io.restassured.internal.filter.SendRequestFilter.filter(SendRequestFilter.groovy:30)\r\n\tat io.restassured.filter.Filter$filter$0.call(Unknown Source)\r\n\tat app//org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)\r\n\tat io.restassured.filter.Filter$filter.call(Unknown Source)\r\n\tat app//io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)\r\n\tat app//io.restassured.filter.time.TimingFilter.filter(TimingFilter.java:56)\r\n\tat io.restassured.filter.Filter$filter.call(Unknown Source)\r\n\tat app//org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:47)\r\n\tat io.restassured.filter.Filter$filter$0.call(Unknown Source)\r\n\tat app//io.restassured.internal.filter.FilterContextImpl.next(FilterContextImpl.groovy:72)\r\n\tat io.restassured.filter.FilterContext$next.call(Unknown Source)\r\n\tat app//io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1672)\r\n\tat java.base@11.0.12/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base@11.0.12/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base@11.0.12/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base@11.0.12/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat app//org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)\r\n\tat app//groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\r\n\tat app//groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)\r\n\tat app//groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)\r\n\tat app//groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)\r\n\tat app//groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)\r\n\tat app//org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)\r\n\tat app//org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)\r\n\tat app//org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)\r\n\tat app//io.restassured.internal.RequestSpecificationImpl.applyPathParamsAndSendRequest(RequestSpecificationImpl.groovy:1678)\r\n\tat java.base@11.0.12/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base@11.0.12/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base@11.0.12/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base@11.0.12/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat app//org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:107)\r\n\tat app//groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\r\n\tat app//groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1268)\r\n\tat app//groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1035)\r\n\tat app//groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:819)\r\n\tat app//groovy.lang.GroovyObject.invokeMethod(GroovyObject.java:39)\r\n\tat app//org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.call(PogoInterceptableSite.java:45)\r\n\tat app//org.codehaus.groovy.runtime.callsite.PogoInterceptableSite.callCurrent(PogoInterceptableSite.java:55)\r\n\tat app//org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:203)\r\n\tat app//io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy:177)\r\n\tat app//io.restassured.internal.RequestSpecificationImpl.post(RequestSpecificationImpl.groovy)\r\n\tat app//ru.yandex.praktikum.CourierClient.loginWithoutPassword(CourierClient.java:85)\r\n\tat app//ru.yandex.praktikum.AuthorisationCourierNegativeTests.courierAuthorisationWithOutPassword(AuthorisationCourierNegativeTests.java:52)\r\n\tat java.base@11.0.12/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base@11.0.12/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base@11.0.12/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base@11.0.12/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat app//org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\r\n\tat app//org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n\tat app//org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)\r\n\tat app//org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n\tat app//org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:299)\r\n\tat app//org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:293)\r\n\tat java.base@11.0.12/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.base@11.0.12/java.lang.Thread.run(Thread.java:829)\r\n"},"stage":"finished","steps":[{"name":"create","status":"passed","stage":"finished","steps":[],"attachments":[],"parameters":[{"name":"courier","value":"ru.yandex.praktikum.Courier@671de807"}],"start":1638132176053,"stop":1638132176134},{"name":"loginWithoutPassword","stage":"running","steps":[],"attachments":[],"parameters":[{"name":"courier","value":"ru.yandex.praktikum.Courier@671de807"}],"start":1638132176134}],"attachments":[],"parameters":[],"start":1638132176046,"stop":1638132191076}
\ No newline at end of file
Index: target/allure-results/cf52ac50-79cc-4e13-928f-869cd4299def-result.json
===================================================================
diff --git a/target/allure-results/cf52ac50-79cc-4e13-928f-869cd4299def-result.json b/target/allure-results/cf52ac50-79cc-4e13-928f-869cd4299def-result.json
deleted file mode 100644
--- a/target/allure-results/cf52ac50-79cc-4e13-928f-869cd4299def-result.json	
+++ /dev/null	
@@ -1,1 +0,0 @@
-{"uuid":"cf52ac50-79cc-4e13-928f-869cd4299def","historyId":"b84f7d269fa570bdadba82ffd700cc7b","fullName":"ru.yandex.praktikum.CreateCourierPositiveTests.newRegistrationCourierTest","labels":[{"name":"package","value":"ru.yandex.praktikum"},{"name":"testClass","value":"ru.yandex.praktikum.CreateCourierPositiveTests"},{"name":"testMethod","value":"newRegistrationCourierTest"},{"name":"suite","value":"ru.yandex.praktikum.CreateCourierPositiveTests"},{"name":"host","value":"LAPTOP-U2DF6PFP"},{"name":"thread","value":"98600@LAPTOP-U2DF6PFP.main(1)"},{"name":"framework","value":"junit4"},{"name":"language","value":"java"}],"links":[],"name":"Создание курьера","status":"passed","stage":"finished","steps":[{"name":"create","status":"passed","stage":"finished","steps":[],"attachments":[],"parameters":[{"name":"courier","value":"ru.yandex.praktikum.Courier@7c919e1e"}],"start":1638132192157,"stop":1638132192288},{"name":"login","status":"passed","stage":"finished","steps":[],"attachments":[],"parameters":[{"name":"courierData","value":"ru.yandex.praktikum.CourierData@41831611"}],"start":1638132192288,"stop":1638132192364},{"name":"delete","status":"passed","stage":"finished","steps":[],"attachments":[],"parameters":[{"name":"courierId","value":"5534"}],"start":1638132192391,"stop":1638132192468}],"attachments":[],"parameters":[],"start":1638132192157,"stop":1638132192468}
\ No newline at end of file
Index: target/allure-results/a3f4314d-e340-4f44-a5c6-91448b648451-result.json
===================================================================
diff --git a/target/allure-results/a3f4314d-e340-4f44-a5c6-91448b648451-result.json b/target/allure-results/a3f4314d-e340-4f44-a5c6-91448b648451-result.json
deleted file mode 100644
--- a/target/allure-results/a3f4314d-e340-4f44-a5c6-91448b648451-result.json	
+++ /dev/null	
@@ -1,1 +0,0 @@
-{"uuid":"a3f4314d-e340-4f44-a5c6-91448b648451","historyId":"15a840e40fe25b739006445c37f45f4f","fullName":"ru.yandex.praktikum.CreateOrderTest.createOrderParameterizedTest[0]","labels":[{"name":"package","value":"ru.yandex.praktikum"},{"name":"testClass","value":"ru.yandex.praktikum.CreateOrderTest"},{"name":"testMethod","value":"createOrderParameterizedTest[0]"},{"name":"suite","value":"ru.yandex.praktikum.CreateOrderTest"},{"name":"host","value":"LAPTOP-U2DF6PFP"},{"name":"thread","value":"98600@LAPTOP-U2DF6PFP.main(1)"},{"name":"framework","value":"junit4"},{"name":"language","value":"java"}],"links":[],"name":"Параметризованный тест на создание заказа","status":"passed","stage":"finished","steps":[],"attachments":[],"parameters":[],"start":1638132193951,"stop":1638132194058}
\ No newline at end of file
Index: target/allure-results/7aed7d78-f6e3-4922-97b1-6e54329b634e-result.json
===================================================================
diff --git a/target/allure-results/7aed7d78-f6e3-4922-97b1-6e54329b634e-result.json b/target/allure-results/7aed7d78-f6e3-4922-97b1-6e54329b634e-result.json
deleted file mode 100644
--- a/target/allure-results/7aed7d78-f6e3-4922-97b1-6e54329b634e-result.json	
+++ /dev/null	
@@ -1,1 +0,0 @@
-{"uuid":"7aed7d78-f6e3-4922-97b1-6e54329b634e","historyId":"cf2f2dcb1379a0f9870a46801591091e","fullName":"ru.yandex.praktikum.AuthorisationCourierPositiveTests.courierLoginWithFullData","labels":[{"name":"package","value":"ru.yandex.praktikum"},{"name":"testClass","value":"ru.yandex.praktikum.AuthorisationCourierPositiveTests"},{"name":"testMethod","value":"courierLoginWithFullData"},{"name":"suite","value":"ru.yandex.praktikum.AuthorisationCourierPositiveTests"},{"name":"host","value":"LAPTOP-U2DF6PFP"},{"name":"thread","value":"98600@LAPTOP-U2DF6PFP.main(1)"},{"name":"framework","value":"junit4"},{"name":"language","value":"java"}],"links":[],"name":"Авторизация зарегистрированного курьера","status":"passed","stage":"finished","steps":[{"name":"create","status":"passed","stage":"finished","steps":[],"attachments":[],"parameters":[{"name":"courier","value":"ru.yandex.praktikum.Courier@e581302"}],"start":1638132191243,"stop":1638132191318},{"name":"login","status":"passed","stage":"finished","steps":[],"attachments":[],"parameters":[{"name":"courierData","value":"ru.yandex.praktikum.CourierData@10660795"}],"start":1638132191318,"stop":1638132191420},{"name":"delete","status":"passed","stage":"finished","steps":[],"attachments":[],"parameters":[{"name":"courierId","value":"5533"}],"start":1638132191420,"stop":1638132191487}],"attachments":[],"parameters":[],"start":1638132191243,"stop":1638132191490}
\ No newline at end of file
Index: target/allure-results/ac68be22-f99d-4e7e-8716-81a7dbdd58e1-result.json
===================================================================
diff --git a/target/allure-results/ac68be22-f99d-4e7e-8716-81a7dbdd58e1-result.json b/target/allure-results/ac68be22-f99d-4e7e-8716-81a7dbdd58e1-result.json
deleted file mode 100644
--- a/target/allure-results/ac68be22-f99d-4e7e-8716-81a7dbdd58e1-result.json	
+++ /dev/null	
@@ -1,1 +0,0 @@
-{"uuid":"ac68be22-f99d-4e7e-8716-81a7dbdd58e1","historyId":"69fb5c5e744695402024ee01d00bf8fb","fullName":"ru.yandex.praktikum.CreateCourierNegativeTests.newCourierWithoutPasswordTest","labels":[{"name":"package","value":"ru.yandex.praktikum"},{"name":"testClass","value":"ru.yandex.praktikum.CreateCourierNegativeTests"},{"name":"testMethod","value":"newCourierWithoutPasswordTest"},{"name":"suite","value":"ru.yandex.praktikum.CreateCourierNegativeTests"},{"name":"host","value":"LAPTOP-U2DF6PFP"},{"name":"thread","value":"98600@LAPTOP-U2DF6PFP.main(1)"},{"name":"framework","value":"junit4"},{"name":"language","value":"java"}],"links":[],"name":"Создание курьера без указания пароля","status":"passed","stage":"finished","steps":[{"name":"createWithOutPassword","status":"passed","stage":"finished","steps":[],"attachments":[],"parameters":[{"name":"courier","value":"ru.yandex.praktikum.Courier@553d828a"}],"start":1638132191497,"stop":1638132192023}],"attachments":[],"parameters":[],"start":1638132191496,"stop":1638132192053}
\ No newline at end of file
Index: target/allure-results/cd13e63d-7151-4841-86f4-057ba47db07e-result.json
===================================================================
diff --git a/target/allure-results/cd13e63d-7151-4841-86f4-057ba47db07e-result.json b/target/allure-results/cd13e63d-7151-4841-86f4-057ba47db07e-result.json
deleted file mode 100644
--- a/target/allure-results/cd13e63d-7151-4841-86f4-057ba47db07e-result.json	
+++ /dev/null	
@@ -1,1 +0,0 @@
-{"uuid":"cd13e63d-7151-4841-86f4-057ba47db07e","historyId":"502b5648c72239dbb889262d4258ff3f","fullName":"ru.yandex.praktikum.AuthorisationCourierNegativeTests.courierAuthorisationWithOutLogin","labels":[{"name":"package","value":"ru.yandex.praktikum"},{"name":"testClass","value":"ru.yandex.praktikum.AuthorisationCourierNegativeTests"},{"name":"testMethod","value":"courierAuthorisationWithOutLogin"},{"name":"suite","value":"ru.yandex.praktikum.AuthorisationCourierNegativeTests"},{"name":"host","value":"LAPTOP-U2DF6PFP"},{"name":"thread","value":"98600@LAPTOP-U2DF6PFP.main(1)"},{"name":"framework","value":"junit4"},{"name":"language","value":"java"}],"links":[],"name":"Авторизация курьера без указания логина","status":"passed","stage":"finished","steps":[{"name":"create","status":"passed","stage":"finished","steps":[],"attachments":[],"parameters":[{"name":"courier","value":"ru.yandex.praktikum.Courier@6707a4bf"}],"start":1638132170744,"stop":1638132174229},{"name":"loginWithoutLogin","status":"passed","stage":"finished","steps":[],"attachments":[],"parameters":[{"name":"courier","value":"ru.yandex.praktikum.Courier@6707a4bf"}],"start":1638132174230,"stop":1638132174277},{"name":"login","status":"passed","stage":"finished","steps":[],"attachments":[],"parameters":[{"name":"courierData","value":"ru.yandex.praktikum.CourierData@3b9a2629"}],"start":1638132175712,"stop":1638132175799},{"name":"delete","status":"passed","stage":"finished","steps":[],"attachments":[],"parameters":[{"name":"courierId","value":"5530"}],"start":1638132175800,"stop":1638132175851}],"attachments":[],"parameters":[],"start":1638132168890,"stop":1638132175854}
\ No newline at end of file
Index: target/allure-results/486a0714-33cc-4f23-8060-0f04daaddce9-result.json
===================================================================
diff --git a/target/allure-results/486a0714-33cc-4f23-8060-0f04daaddce9-result.json b/target/allure-results/486a0714-33cc-4f23-8060-0f04daaddce9-result.json
deleted file mode 100644
--- a/target/allure-results/486a0714-33cc-4f23-8060-0f04daaddce9-result.json	
+++ /dev/null	
@@ -1,1 +0,0 @@
-{"uuid":"486a0714-33cc-4f23-8060-0f04daaddce9","historyId":"4b502dde7611980ee627eda86501305c","fullName":"ru.yandex.praktikum.CreateCourierNegativeTests.newCourierWithoutLoginTest","labels":[{"name":"package","value":"ru.yandex.praktikum"},{"name":"testClass","value":"ru.yandex.praktikum.CreateCourierNegativeTests"},{"name":"testMethod","value":"newCourierWithoutLoginTest"},{"name":"suite","value":"ru.yandex.praktikum.CreateCourierNegativeTests"},{"name":"host","value":"LAPTOP-U2DF6PFP"},{"name":"thread","value":"98600@LAPTOP-U2DF6PFP.main(1)"},{"name":"framework","value":"junit4"},{"name":"language","value":"java"}],"links":[],"name":"Создание курьера без указания логина","status":"passed","stage":"finished","steps":[{"name":"createWithOutLogin","status":"passed","stage":"finished","steps":[],"attachments":[],"parameters":[{"name":"courier","value":"ru.yandex.praktikum.Courier@530bd77b"}],"start":1638132192059,"stop":1638132192123}],"attachments":[],"parameters":[],"start":1638132192058,"stop":1638132192151}
\ No newline at end of file
Index: src/main/java/ru/yandex/praktikum/BaseUri.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/yandex/praktikum/BaseUri.java b/src/main/java/ru/yandex/praktikum/BaseUri.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/ru/yandex/praktikum/BaseUri.java	
@@ -0,0 +1,8 @@
+package ru.yandex.praktikum;
+
+public class BaseUri {
+    private static String baseURI;
+    public static String getBaseUri() {
+       return baseURI = "http://qa-scooter.praktikum-services.ru";
+    }
+}
\ No newline at end of file
Index: .idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/encodings.xml b/.idea/encodings.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/encodings.xml	
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding">
+    <file url="file://$PROJECT_DIR$/src/main/java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/src/main/resources" charset="UTF-8" />
+  </component>
+</project>
\ No newline at end of file
Index: src/test/java/ru/yandex/praktikum/AuthorizationUnregisteredCourier.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/ru/yandex/praktikum/AuthorizationUnregisteredCourier.java b/src/test/java/ru/yandex/praktikum/AuthorizationUnregisteredCourier.java
new file mode 100644
--- /dev/null	
+++ b/src/test/java/ru/yandex/praktikum/AuthorizationUnregisteredCourier.java	
@@ -0,0 +1,35 @@
+package ru.yandex.praktikum;
+
+import io.qameta.allure.junit4.DisplayName;
+import io.restassured.RestAssured;
+import io.restassured.response.Response;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.hamcrest.CoreMatchers.equalTo;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.Assert.assertEquals;
+
+public class AuthorizationUnregisteredCourier {
+    private Courier courier;
+    private CourierClient courierClient;
+
+    @Before
+    public void setUp() {
+        RestAssured.baseURI = BaseUri.getBaseUri();
+        courier = Courier.getRandom();
+        courierClient = new CourierClient();
+    }
+
+    @Test
+    @DisplayName("Авторизация незарегистрированного курьера")
+    public void courierAuthorisationWithIncorrectData(){
+        Response response = (Response) courierClient.authorizationUnregisteredCourier(CourierData.from(courier));
+
+        int statusCode = response.statusCode();
+        String errorText = response.path("message");
+
+        assertThat(statusCode, equalTo(404));
+        assertEquals("Учетная запись не найдена", errorText);
+    }
+}
Index: src/main/java/ru/yandex/praktikum/Courier.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.yandex.praktikum;\r\n\r\nimport org.apache.commons.lang3.RandomStringUtils;\r\n\r\n\r\npublic class Courier {\r\n    public String login;\r\n    public String password;\r\n    public String firstName;\r\n\r\n\r\n    //конструктор курьера с параметрами для регистрации\r\n   public Courier(String login, String password, String firstName) {\r\n        this.login = login;\r\n        this.password = password;\r\n        this.firstName = firstName;\r\n    }\r\n\r\n    //конструктор курьера со случайными данными\r\n    public static Courier getRandom() {\r\n        final String login = RandomStringUtils.randomAlphabetic(10);\r\n        final String password = RandomStringUtils.randomAlphabetic(10);\r\n        final String firstName = RandomStringUtils.randomAlphabetic(10);\r\n        return new Courier(login, password, firstName);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/yandex/praktikum/Courier.java b/src/main/java/ru/yandex/praktikum/Courier.java
--- a/src/main/java/ru/yandex/praktikum/Courier.java	
+++ b/src/main/java/ru/yandex/praktikum/Courier.java	
@@ -8,7 +8,6 @@
     public String password;
     public String firstName;
 
-
     //конструктор курьера с параметрами для регистрации
    public Courier(String login, String password, String firstName) {
         this.login = login;
@@ -16,21 +15,11 @@
         this.firstName = firstName;
     }
 
-    //конструктор курьера со случайными данными
+    //метод для генерации курьера со случайными данными
     public static Courier getRandom() {
         final String login = RandomStringUtils.randomAlphabetic(10);
         final String password = RandomStringUtils.randomAlphabetic(10);
         final String firstName = RandomStringUtils.randomAlphabetic(10);
         return new Courier(login, password, firstName);
     }
-
-
-
-
-
-
-
-
-
-
 }
Index: target/allure-results/allure.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#Sun Nov 28 23:43:59 MSK 2021\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/target/allure-results/allure.properties b/target/allure-results/allure.properties
--- a/target/allure-results/allure.properties	
+++ b/target/allure-results/allure.properties	
@@ -1,1 +1,1 @@
-#Sun Nov 28 23:43:59 MSK 2021
+#Sat Dec 04 12:30:04 MSK 2021
Index: src/test/java/ru/yandex/praktikum/OrderListCheck.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.yandex.praktikum;\r\n\r\nimport io.qameta.allure.junit4.DisplayName;\r\nimport io.restassured.RestAssured;\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\nimport java.util.List;\r\n\r\nimport static org.junit.Assert.*;\r\nimport static io.restassured.RestAssured.given;\r\n\r\npublic class OrderListCheck  {\r\n    @Before\r\n    public void setUp() {\r\n        RestAssured.baseURI = \"http://qa-scooter.praktikum-services.ru\";}\r\n\r\n    @Test\r\n    @DisplayName(\"Тест на проверку того, что запрос возвращает список заказов\")\r\n    public void isReturnedOrderListNotEmpty (){\r\n\r\n        List<Object> orders = given()\r\n                .header(\"Content-type\", \"application/json\")\r\n                .when()\r\n                .get(\"/api/v1/orders\")\r\n                .then()\r\n                .extract()\r\n                .jsonPath()\r\n                .getList(\"orders\");\r\n\r\n        assertFalse(orders.isEmpty());\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/ru/yandex/praktikum/OrderListCheck.java b/src/test/java/ru/yandex/praktikum/OrderListCheck.java
--- a/src/test/java/ru/yandex/praktikum/OrderListCheck.java	
+++ b/src/test/java/ru/yandex/praktikum/OrderListCheck.java	
@@ -12,7 +12,8 @@
 public class OrderListCheck  {
     @Before
     public void setUp() {
-        RestAssured.baseURI = "http://qa-scooter.praktikum-services.ru";}
+        RestAssured.baseURI = BaseUri.getBaseUri();
+    }
 
     @Test
     @DisplayName("Тест на проверку того, что запрос возвращает список заказов")
Index: src/test/java/ru/yandex/praktikum/CreateCourierNegativeTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.yandex.praktikum;\r\n\r\nimport io.qameta.allure.junit4.DisplayName;\r\nimport io.restassured.RestAssured;\r\nimport io.restassured.response.Response;\r\nimport io.restassured.response.ValidatableResponse;\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\n\r\nimport static io.restassured.RestAssured.given;\r\nimport static org.hamcrest.CoreMatchers.equalTo;\r\nimport static org.hamcrest.MatcherAssert.assertThat;\r\nimport static org.junit.Assert.assertEquals;\r\n\r\n\r\npublic class CreateCourierNegativeTests {\r\n    private Courier courier;\r\n    private CourierClient courierClient;\r\n\r\n    @Before\r\n    public void setUp() {\r\n        RestAssured.baseURI = \"http://qa-scooter.praktikum-services.ru\";\r\n        courierClient = new CourierClient();\r\n    }\r\n\r\n    @Test\r\n    @DisplayName(\"Создание курьера без указания логина\")\r\n    public void newCourierWithoutLoginTest(){\r\n        Courier courier = Courier.getRandom();\r\n        ValidatableResponse response = new CourierClient().createWithOutLogin(courier);\r\n\r\n        int statusCode = response.extract().statusCode();\r\n        String errorText = response.extract().path(\"message\");\r\n\r\n        assertThat(statusCode, equalTo(400));\r\n        assertEquals(\"Недостаточно данных для создания учетной записи\", errorText);\r\n    }\r\n\r\n    @Test\r\n    @DisplayName(\"Создание курьера без указания пароля\")\r\n    public void newCourierWithoutPasswordTest(){\r\n        Courier courier = Courier.getRandom();\r\n        ValidatableResponse response = new CourierClient().createWithOutPassword(courier);\r\n\r\n        int statusCode = response.extract().statusCode();\r\n        String errorText = response.extract().path(\"message\");\r\n\r\n        assertThat(statusCode, equalTo(400));\r\n        assertEquals(\"Недостаточно данных для создания учетной записи\", errorText);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/ru/yandex/praktikum/CreateCourierNegativeTests.java b/src/test/java/ru/yandex/praktikum/CreateCourierNegativeTests.java
--- a/src/test/java/ru/yandex/praktikum/CreateCourierNegativeTests.java	
+++ b/src/test/java/ru/yandex/praktikum/CreateCourierNegativeTests.java	
@@ -2,12 +2,9 @@
 
 import io.qameta.allure.junit4.DisplayName;
 import io.restassured.RestAssured;
-import io.restassured.response.Response;
 import io.restassured.response.ValidatableResponse;
 import org.junit.Before;
 import org.junit.Test;
-
-import static io.restassured.RestAssured.given;
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.Assert.assertEquals;
@@ -19,7 +16,7 @@
 
     @Before
     public void setUp() {
-        RestAssured.baseURI = "http://qa-scooter.praktikum-services.ru";
+        RestAssured.baseURI = BaseUri.getBaseUri();
         courierClient = new CourierClient();
     }
 
Index: src/test/java/ru/yandex/praktikum/AuthorisationCourierPositiveTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.yandex.praktikum;\r\n\r\nimport io.qameta.allure.junit4.DisplayName;\r\nimport io.restassured.RestAssured;\r\nimport io.restassured.response.ValidatableResponse;\r\nimport org.junit.After;\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\nimport static org.junit.Assert.assertNotEquals;\r\n\r\n\r\npublic class AuthorisationCourierPositiveTests {\r\n    private Courier courier;\r\n    private CourierClient courierClient;\r\n    private int courierId;\r\n\r\n    @Before\r\n    public void setUp() {\r\n        RestAssured.baseURI = \"http://qa-scooter.praktikum-services.ru\";\r\n        courier = Courier.getRandom();\r\n        courierClient = new CourierClient();\r\n    }\r\n\r\n    @After\r\n    public void tearDown() {\r\n        courierClient.delete(courierId);\r\n    }\r\n\r\n    @Test\r\n    @DisplayName(\"Авторизация зарегистрированного курьера\")\r\n    public void courierLoginWithFullData() {\r\n        ValidatableResponse response = courierClient.create(courier);\r\n        courierId = courierClient.login(CourierData.from(courier));\r\n\r\n        assertNotEquals(0,courierId);\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/ru/yandex/praktikum/AuthorisationCourierPositiveTests.java b/src/test/java/ru/yandex/praktikum/AuthorisationCourierPositiveTests.java
--- a/src/test/java/ru/yandex/praktikum/AuthorisationCourierPositiveTests.java	
+++ b/src/test/java/ru/yandex/praktikum/AuthorisationCourierPositiveTests.java	
@@ -16,7 +16,7 @@
 
     @Before
     public void setUp() {
-        RestAssured.baseURI = "http://qa-scooter.praktikum-services.ru";
+        RestAssured.baseURI = BaseUri.getBaseUri();
         courier = Courier.getRandom();
         courierClient = new CourierClient();
     }
Index: src/test/java/ru/yandex/praktikum/AuthorisationCourierNegativeTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.yandex.praktikum;\r\n\r\nimport io.qameta.allure.junit4.DisplayName;\r\nimport io.restassured.RestAssured;\r\nimport io.restassured.response.ValidatableResponse;\r\nimport org.junit.After;\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\n\r\nimport static io.restassured.RestAssured.given;\r\nimport static org.hamcrest.CoreMatchers.equalTo;\r\nimport static org.hamcrest.MatcherAssert.assertThat;\r\nimport static org.hamcrest.Matchers.is;\r\nimport static org.hamcrest.Matchers.not;\r\nimport static org.junit.Assert.assertEquals;\r\n\r\npublic class AuthorisationCourierNegativeTests {\r\n    private Courier courier;\r\n    private CourierClient courierClient;\r\n    private int courierId;\r\n\r\n\r\n    @Before\r\n    public void setUp() {\r\n        RestAssured.baseURI = \"http://qa-scooter.praktikum-services.ru\";\r\n        courier = Courier.getRandom();\r\n        courierClient = new CourierClient();\r\n    }\r\n\r\n\r\n    @Test\r\n    @DisplayName(\"Авторизация курьера без указания логина\")\r\n    public void courierAuthorisationWithOutLogin(){\r\n        courierClient.create(courier);\r\n        ValidatableResponse response1 = courierClient.loginWithoutLogin(courier);\r\n\r\n        int statusCode = response1.extract().statusCode();\r\n        String errorText = response1.extract().path(\"message\");\r\n\r\n        assertThat(statusCode, equalTo(400));\r\n        assertEquals(\"Недостаточно данных для входа\", errorText);\r\n// корректная авторизация для удаления ранее созданных тестовых данных\r\n        courierId = courierClient.login(CourierData.from(courier));\r\n        courierClient.delete(courierId);\r\n\r\n    }\r\n\r\n    @Test(timeout=15000) // Добавлен тайм-аут, так как с такими параметрами запроса сервер не отвечает\r\n    @DisplayName(\"Авторизация курьера без указания пароля\")\r\n    public void courierAuthorisationWithOutPassword() {\r\n        courierClient.create(courier);\r\n        ValidatableResponse response1 = courierClient.loginWithoutPassword(courier);\r\n\r\n        int statusCode = response1.extract().statusCode();\r\n        String errorText = response1.extract().path(\"message\");\r\n\r\n        assertThat(statusCode, equalTo(400));\r\n        assertEquals(\"Недостаточно данных для входа\", errorText);\r\n\r\n// корректная авторизация для удаления ранее созданных тестовых данных\r\n        courierId = courierClient.login(CourierData.from(courier));\r\n        courierClient.delete(courierId);\r\n    }\r\n\r\n    @Test\r\n    @DisplayName(\"Авторизация незарегистрированного курьера \")\r\n    public void courierAuthorisationWithIncorrectData() {\r\n        ValidatableResponse response = courierClient.unregisteredCourierlogin(courier);\r\n\r\n        int statusCode = response.extract().statusCode();\r\n        String errorText = response.extract().path(\"message\");\r\n\r\n        assertThat(statusCode, equalTo(404));\r\n        assertEquals(\"Учетная запись не найдена\", errorText);\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/ru/yandex/praktikum/AuthorisationCourierNegativeTests.java b/src/test/java/ru/yandex/praktikum/AuthorisationCourierNegativeTests.java
--- a/src/test/java/ru/yandex/praktikum/AuthorisationCourierNegativeTests.java	
+++ b/src/test/java/ru/yandex/praktikum/AuthorisationCourierNegativeTests.java	
@@ -6,12 +6,8 @@
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
-
-import static io.restassured.RestAssured.given;
 import static org.hamcrest.CoreMatchers.equalTo;
 import static org.hamcrest.MatcherAssert.assertThat;
-import static org.hamcrest.Matchers.is;
-import static org.hamcrest.Matchers.not;
 import static org.junit.Assert.assertEquals;
 
 public class AuthorisationCourierNegativeTests {
@@ -20,60 +16,46 @@
     private int courierId;
 
 
+
     @Before
     public void setUp() {
-        RestAssured.baseURI = "http://qa-scooter.praktikum-services.ru";
+        RestAssured.baseURI = BaseUri.getBaseUri();
         courier = Courier.getRandom();
         courierClient = new CourierClient();
     }
 
+    @After
+    public void tearDown(){
+        courierId = courierClient.login(CourierData.from(courier));
+        courierClient.delete(courierId);
+    }
+
 
     @Test
     @DisplayName("Авторизация курьера без указания логина")
     public void courierAuthorisationWithOutLogin(){
         courierClient.create(courier);
-        ValidatableResponse response1 = courierClient.loginWithoutLogin(courier);
+        ValidatableResponse response1 = courierClient.authorizationWithoutLogin(courier);
+        courierId = courierClient.login(CourierData.from(courier));
 
         int statusCode = response1.extract().statusCode();
         String errorText = response1.extract().path("message");
 
         assertThat(statusCode, equalTo(400));
         assertEquals("Недостаточно данных для входа", errorText);
-// корректная авторизация для удаления ранее созданных тестовых данных
-        courierId = courierClient.login(CourierData.from(courier));
-        courierClient.delete(courierId);
-
     }
 
     @Test(timeout=15000) // Добавлен тайм-аут, так как с такими параметрами запроса сервер не отвечает
     @DisplayName("Авторизация курьера без указания пароля")
     public void courierAuthorisationWithOutPassword() {
         courierClient.create(courier);
-        ValidatableResponse response1 = courierClient.loginWithoutPassword(courier);
-
-        int statusCode = response1.extract().statusCode();
-        String errorText = response1.extract().path("message");
-
-        assertThat(statusCode, equalTo(400));
-        assertEquals("Недостаточно данных для входа", errorText);
-
-// корректная авторизация для удаления ранее созданных тестовых данных
+        ValidatableResponse response = courierClient.authorizationWithoutPassword(courier);
         courierId = courierClient.login(CourierData.from(courier));
-        courierClient.delete(courierId);
-    }
-
-    @Test
-    @DisplayName("Авторизация незарегистрированного курьера ")
-    public void courierAuthorisationWithIncorrectData() {
-        ValidatableResponse response = courierClient.unregisteredCourierlogin(courier);
 
         int statusCode = response.extract().statusCode();
         String errorText = response.extract().path("message");
 
-        assertThat(statusCode, equalTo(404));
-        assertEquals("Учетная запись не найдена", errorText);
+        assertThat(statusCode, equalTo(400));
+        assertEquals("Недостаточно данных для входа", errorText);
     }
-
-
-
 }
